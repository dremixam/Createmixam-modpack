name: Build Mrpack

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get version from tag or commit
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-7)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Create mrpack file
      run: |
        # Create a temporary directory for the mrpack contents
        mkdir -p mrpack-temp
        
        # Copy all necessary files to the temporary directory
        cp modrinth.index.json mrpack-temp/
        cp -r overrides mrpack-temp/
        
        # Create the mrpack file (ZIP with store-only compression to reduce entropy)
        cd mrpack-temp
        zip -r -0 -X "../Createmixam.mrpack" *
        cd ..
        
        # Clean up temporary directory
        rm -rf mrpack-temp
    
    - name: Upload mrpack as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Createmixam
        path: "*.mrpack"
        retention-days: 30

    # New step: Scan the built archive with VirusTotal when creating a tagged release
    - name: VirusTotal scan (if tag)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      id: vt_scan
      env:
        VT_API_KEY: ${{ secrets.VT_API_KEY }}
      run: |
        # Initialize step outputs so later conditions/env don't fail when skipping
        echo "REPORT_URL=" >> $GITHUB_OUTPUT
        echo "ANALYSIS_SUMMARY=" >> $GITHUB_OUTPUT

        if [ -z "$VT_API_KEY" ]; then
          echo "VT_API_KEY not set, skipping VirusTotal scan. Add it in repository Secrets." >&2
          exit 0
        fi

        FILE=$(ls -1 *.mrpack | head -n 1)
        if [ -z "$FILE" ]; then
          echo "No .mrpack file found to scan." >&2
          exit 1
        fi

        echo "Uploading $FILE to VirusTotal..."
        # Determine file size (fallback ensures compatibility)
        SIZE=$(stat -c%s "$FILE" 2>/dev/null || wc -c < "$FILE")

        if [ "$SIZE" -gt 32000000 ]; then
          # Request an upload URL for large files (>32MB)
          UPLOAD_URL=$(curl -s --request GET \
            --url https://www.virustotal.com/api/v3/files/upload_url \
            --header "X-Apikey: $VT_API_KEY" | jq -r '.data')

          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "Failed to get VirusTotal upload URL." >&2
            exit 1
          fi

          RESP=$(curl -s --request POST \
            --url "$UPLOAD_URL" \
            --form "file=@$FILE")
        else
          RESP=$(curl -s --request POST \
            --url https://www.virustotal.com/api/v3/files \
            --header "X-Apikey: $VT_API_KEY" \
            --form "file=@$FILE")
        fi

        ANALYSIS_ID=$(echo "$RESP" | jq -r '.data.id')
        if [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" = "null" ]; then
          echo "Failed to start VirusTotal analysis: $RESP" >&2
          exit 1
        fi

        echo "Analysis started: $ANALYSIS_ID — waiting for completion..."
        # Poll analysis status (up to ~5 minutes)
        for i in {1..30}; do
          ARESP=$(curl -s --request GET \
            --url "https://www.virustotal.com/api/v3/analyses/$ANALYSIS_ID" \
            --header "X-Apikey: $VT_API_KEY")
          STATUS=$(echo "$ARESP" | jq -r '.data.attributes.status')
          echo "Status: $STATUS"
          if [ "$STATUS" = "completed" ]; then
            FILE_SHA256=$(echo "$ARESP" | jq -r '.meta.file_info.sha256')
            break
          fi
          sleep 10
        done

        if [ -z "$FILE_SHA256" ] || [ "$FILE_SHA256" = "null" ]; then
          echo "Timed out waiting for VirusTotal analysis to complete." >&2
          exit 1
        fi

        # Fetch summary results
        FRESP=$(curl -s --request GET \
          --url "https://www.virustotal.com/api/v3/files/$FILE_SHA256" \
          --header "X-Apikey: $VT_API_KEY")

        MALICIOUS=$(echo "$FRESP" | jq -r '.data.attributes.last_analysis_stats.malicious')
        SUSPICIOUS=$(echo "$FRESP" | jq -r '.data.attributes.last_analysis_stats.suspicious')
        HARMLESS=$(echo "$FRESP" | jq -r '.data.attributes.last_analysis_stats.harmless')
        UNDETECTED=$(echo "$FRESP" | jq -r '.data.attributes.last_analysis_stats.undetected')
        LINK="https://www.virustotal.com/gui/file/$FILE_SHA256"

        SUMMARY="Malicious: $MALICIOUS | Suspicious: $SUSPICIOUS | Harmless: $HARMLESS | Undetected: $UNDETECTED"
        echo "REPORT_URL=$LINK" >> $GITHUB_OUTPUT
        echo "ANALYSIS_SUMMARY=$SUMMARY" >> $GITHUB_OUTPUT

        echo "## VirusTotal Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**File:** $FILE" >> $GITHUB_STEP_SUMMARY
        echo "**Malicious:** $MALICIOUS  |  **Suspicious:** $SUSPICIOUS  |  **Harmless:** $HARMLESS  |  **Undetected:** $UNDETECTED" >> $GITHUB_STEP_SUMMARY
        echo "Report: $LINK" >> $GITHUB_STEP_SUMMARY

        # Fail the job (and thus prevent release creation) on any positives
        M=${MALICIOUS:-0}
        S=${SUSPICIOUS:-0}
        if [ "$M" -gt 0 ] || [ "$S" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ VirusTotal detected positives (malicious=$M, suspicious=$S). Release will not be created." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: Create Release (if tag)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: "*.mrpack"
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Append the VirusTotal link to the Release body (preserves generated notes)
    - name: Append VirusTotal link to Release body
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && steps.vt_scan.outputs.REPORT_URL != ''
      uses: actions/github-script@v7
      env:
        REPORT_URL: ${{ steps.vt_scan.outputs.REPORT_URL }}
        ANALYSIS_SUMMARY: ${{ steps.vt_scan.outputs.ANALYSIS_SUMMARY }}
      with:
        script: |
          const tag = context.ref.replace('refs/tags/', '');
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const { data: release } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
          const summary = process.env.ANALYSIS_SUMMARY ? `Summary: ${process.env.ANALYSIS_SUMMARY}\n` : '';
          const footer = `VirusTotal report: ${process.env.REPORT_URL}\n${summary}`;
          const base = release.body || '';
          const sep = base ? '\n\n' : '';
          const newBody = `${base}${sep}${footer}`;
          await github.rest.repos.updateRelease({ owner, repo, release_id: release.id, body: newBody });
    
    - name: Generate build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Minecraft Version:** $(jq -r '.dependencies.minecraft' modrinth.index.json)" >> $GITHUB_STEP_SUMMARY
        echo "**Fabric Loader:** $(jq -r '.dependencies."fabric-loader"' modrinth.index.json)" >> $GITHUB_STEP_SUMMARY
        echo "**Total Mods:** $(jq '.files | length' modrinth.index.json)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Mrpack file created successfully!" >> $GITHUB_STEP_SUMMARY
        
        # Show file size
        FILESIZE=$(ls -lh *.mrpack | awk '{print $5}')
        echo "**File Size:** $FILESIZE" >> $GITHUB_STEP_SUMMARY
